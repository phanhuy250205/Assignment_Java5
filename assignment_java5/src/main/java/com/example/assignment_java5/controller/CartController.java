package com.example.assignment_java5.controller;

import com.example.assignment_java5.model.chitietdonhang;
import com.example.assignment_java5.model.donhang;
import com.example.assignment_java5.model.nhanvien;
import com.example.assignment_java5.model.sanpham;
import com.example.assignment_java5.repository.chitietdonhangreponsitory;
import com.example.assignment_java5.repository.donhangrepository;
import com.example.assignment_java5.repository.nhanvienrepository;
import com.example.assignment_java5.repository.sanphamrepository;
import com.example.assignment_java5.service.CartService;
import com.example.assignment_java5.service.impl.CartServiceImpl;
import jakarta.persistence.PersistenceContext;
import jakarta.servlet.http.HttpSession;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

import java.math.BigDecimal;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.transaction.Transactional;
import jakarta.persistence.EntityManager;

@Controller
@RequestMapping("/cart")
public class CartController {

    private final donhangrepository donHangRepository;
    private final chitietdonhangreponsitory chiTietDonHangRepository;
    private final sanphamrepository sanPhamRepository;
    private final nhanvienrepository nhanVienRepository;

    @Autowired
    private CartServiceImpl cartService;
    @PersistenceContext
    private EntityManager entityManager;

    public CartController(donhangrepository donHangRepository,
                          chitietdonhangreponsitory chiTietDonHangRepository,
                          sanphamrepository sanPhamRepository,
                          nhanvienrepository nhanVienRepository) {
        this.donHangRepository = donHangRepository;
        this.chiTietDonHangRepository = chiTietDonHangRepository;
        this.sanPhamRepository = sanPhamRepository;
        this.nhanVienRepository = nhanVienRepository;
    }
    @PostMapping("/add")
    @ResponseBody
    public ResponseEntity<Map<String, Object>> addToCart(@RequestParam Long sanPhamId, HttpSession session) {
        Map<String, Object> response = new HashMap<>();

        // üõë Ki·ªÉm tra n·∫øu ng∆∞·ªùi d√πng ch∆∞a ƒëƒÉng nh·∫≠p
        nhanvien currentUser = (nhanvien) session.getAttribute("currentUser");
        if (currentUser == null) {
            response.put("status", "error");
            response.put("message", "Ng∆∞·ªùi d√πng ch∆∞a ƒëƒÉng nh·∫≠p.");
            return ResponseEntity.badRequest().body(response);
        }

        // üõë Ki·ªÉm tra s·∫£n ph·∫©m c√≥ t·ªìn t·∫°i kh√¥ng
        Optional<sanpham> optionalSanPham = sanPhamRepository.findById(sanPhamId);
        if (optionalSanPham.isEmpty()) {
            response.put("status", "error");
            response.put("message", "S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i.");
            return ResponseEntity.badRequest().body(response);
        }
        sanpham sanPham = optionalSanPham.get();

        // üü¢ Ki·ªÉm tra ƒë∆°n h√†ng ch∆∞a thanh to√°n c·ªßa nh√¢n vi√™n
        Optional<donhang> optionalDonHang = donHangRepository.findByNhanVienAndTrangThai(currentUser, "Ch∆∞a thanh to√°n");
        donhang donHang = optionalDonHang.orElseGet(() -> {
            donhang newDonHang = new donhang();
            newDonHang.setNhanVien(currentUser);
            newDonHang.setTrangThai("Ch∆∞a thanh to√°n");
            newDonHang.setTongTien(BigDecimal.ZERO);
            return donHangRepository.save(newDonHang);
        });

        // üü¢ Ki·ªÉm tra s·∫£n ph·∫©m trong ƒë∆°n h√†ng
        Optional<chitietdonhang> optionalChiTiet = chiTietDonHangRepository.findByDonHangAndSanPham(donHang, sanPham);
        chitietdonhang chiTiet;

        if (optionalChiTiet.isPresent()) {
            chiTiet = optionalChiTiet.get();
            chiTiet.setSoLuong(chiTiet.getSoLuong() + 1);
        } else {
            chiTiet = new chitietdonhang();
            chiTiet.setDonHang(donHang);
            chiTiet.setSanPham(sanPham);
            chiTiet.setSoLuong(1);
            chiTiet.setGia(sanPham.getGia());
        }

        // ‚úÖ L∆∞u v√†o DB
        chiTietDonHangRepository.save(chiTiet);

        // ‚úÖ C·∫≠p nh·∫≠t t·ªïng ti·ªÅn ƒë∆°n h√†ng
        BigDecimal newTotal = donHang.getTongTien().add(sanPham.getGia());
        donHang.setTongTien(newTotal);
        donHangRepository.save(donHang);

        // ‚úÖ L·∫•y t·ªïng s·ªë s·∫£n ph·∫©m trong gi·ªè h√†ng (ƒë·∫øm theo s·ªë l∆∞·ª£ng)
//        int cartCount = chiTietDonHangRepository.findByDonHang_NhanVien_IdAndDonHang_TrangThai(currentUser.getId(), "Ch∆∞a thanh to√°n")
//                .stream()
//                .mapToInt(chitietdonhang::getSoLuong)
//                .sum();


        //L·∫•y theo t·ªïng s·ªë s·∫£n s·∫£n ph·∫©m
        int cartCount = (int) chiTietDonHangRepository.findByDonHang_NhanVien_IdAndDonHang_TrangThai(currentUser.getId(), "Ch∆∞a thanh to√°n")
                .stream()
                .map(chitietdonhang::getSanPham)
                .distinct()
                .count();
        session.setAttribute("cartCount", cartCount);

        // ‚úÖ Tr·∫£ v·ªÅ JSON ƒë·ªÉ c·∫≠p nh·∫≠t ngay tr√™n UI
        response.put("status", "success");
        response.put("cartCount", cartCount);
        response.put("totalAmount", donHang.getTongTien());

        return ResponseEntity.ok(response);
    }




    /**
     * ‚úÖ **Hi·ªÉn th·ªã gi·ªè h√†ng**
     */
    @GetMapping("/view")
    public String viewCart(Model model, HttpSession session) {
        System.out.println("üü¢ Y√™u c·∫ßu xem gi·ªè h√†ng");

        // üõë Ki·ªÉm tra n·∫øu ng∆∞·ªùi d√πng ch∆∞a ƒëƒÉng nh·∫≠p
        nhanvien currentUser = (nhanvien) session.getAttribute("currentUser");
        if (currentUser == null) {
            System.out.println("üî¥ L·ªói: Ng∆∞·ªùi d√πng ch∆∞a ƒëƒÉng nh·∫≠p.");
            return "redirect:/user/login";
        }

        System.out.println("‚úÖ Ng∆∞·ªùi d√πng hi·ªán t·∫°i: " + currentUser.getId());

        // üîç L·∫•y danh s√°ch s·∫£n ph·∫©m trong gi·ªè h√†ng c·ªßa nh√¢n vi√™n ƒëang ƒëƒÉng nh·∫≠p
        List<chitietdonhang> cartItems = chiTietDonHangRepository.findByDonHang_NhanVien_IdAndDonHang_TrangThai(
                currentUser.getId(), "Ch∆∞a thanh to√°n"
        );

        // üõí L∆∞u gi·ªè h√†ng v√†o Model ƒë·ªÉ hi·ªÉn th·ªã trong Thymeleaf
        model.addAttribute("chiTietDonHang", cartItems);

        // ‚ùå Sai: T√≠nh t·ªïng s·ªë l∆∞·ª£ng s·∫£n ph·∫©m
        // int cartCount = cartItems.stream().mapToInt(chitietdonhang::getSoLuong).sum();

        // ‚úÖ ƒê·∫øm s·ªë lo·∫°i s·∫£n ph·∫©m trong gi·ªè h√†ng
        int cartCount = (int) cartItems.stream().map(chitietdonhang::getSanPham).distinct().count();
        session.setAttribute("cartCount", cartCount);

        System.out.println("‚úÖ T·ªïng s·ªë lo·∫°i s·∫£n ph·∫©m trong gi·ªè h√†ng: " + cartCount);

        // üî¢ T√≠nh t·ªïng ti·ªÅn ƒë∆°n h√†ng
        BigDecimal totalAmount = BigDecimal.ZERO;
        for (chitietdonhang item : cartItems) {
            if (item.getGia() != null) {
                totalAmount = totalAmount.add(item.getGia().multiply(BigDecimal.valueOf(item.getSoLuong())));
            }
        }

        // üè∑Ô∏è Gi·∫£m gi√° c·ªë ƒë·ªãnh (n·∫øu c√≥)
        BigDecimal discount = new BigDecimal(2000000);
        BigDecimal finalTotal = totalAmount.subtract(discount).max(BigDecimal.ZERO); // Tr√°nh gi√° tr·ªã √¢m

        // ‚úÖ Truy·ªÅn t·ªïng ti·ªÅn v√†o model
        model.addAttribute("totalAmount", totalAmount);
        model.addAttribute("finalTotal", finalTotal);

        System.out.println("üü¢ T·∫°m t√≠nh: " + totalAmount + "‚Ç´");
        System.out.println("üü¢ T·ªïng c·ªông sau gi·∫£m gi√°: " + finalTotal + "‚Ç´");

        return "/Java5/cart"; // Chuy·ªÉn ƒë·∫øn trang gi·ªè h√†ng
    }

    private nhanvien getCurrentUser(HttpSession session) {
        return (nhanvien) session.getAttribute("currentUser");
    }
    @PostMapping("/update")
    @ResponseBody
    public ResponseEntity<Map<String, Object>> updateQuantity(
            @RequestParam Long sanPhamId,
            @RequestParam int quantity,
            HttpSession session) {

        nhanvien currentUser = (nhanvien) session.getAttribute("currentUser");
        if (currentUser == null) {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(null);
        }

        Optional<donhang> optionalDonHang = donHangRepository.findByNhanVienAndTrangThai(currentUser, "Ch∆∞a thanh to√°n");
        if (optionalDonHang.isEmpty()) {
            return ResponseEntity.badRequest().body(null);
        }
        donhang donHang = optionalDonHang.get();

        Optional<chitietdonhang> optionalChiTiet = chiTietDonHangRepository.findByDonHangAndSanPham(donHang, sanPhamRepository.findById(sanPhamId).orElse(null));
        if (optionalChiTiet.isEmpty()) {
            return ResponseEntity.badRequest().body(null);
        }

        chitietdonhang chiTiet = optionalChiTiet.get();
        sanpham sanPham = chiTiet.getSanPham();

        // üõë Ki·ªÉm tra s·ªë l∆∞·ª£ng t·ªìn kho tr∆∞·ªõc khi c·∫≠p nh·∫≠t
        if (quantity > sanPham.getSoLuong()) {
            quantity = sanPham.getSoLuong(); // Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng theo t·ªìn kho
        }

        chiTiet.setSoLuong(quantity);
        chiTietDonHangRepository.save(chiTiet);

        // üü¢ C·∫≠p nh·∫≠t t·ªïng ti·ªÅn ƒë∆°n h√†ng
        BigDecimal totalAmount = BigDecimal.ZERO;
        for (chitietdonhang item : chiTietDonHangRepository.findByDonHang_NhanVien_IdAndDonHang_TrangThai(currentUser.getId(), "Ch∆∞a thanh to√°n")) {
            totalAmount = totalAmount.add(item.getGia().multiply(BigDecimal.valueOf(item.getSoLuong())));
        }
        donHang.setTongTien(totalAmount);
        donHangRepository.save(donHang);

        // üü¢ Tr·∫£ v·ªÅ t·ªïng ti·ªÅn m·ªõi & s·ªë l∆∞·ª£ng t·ªìn kho ƒë·ªÉ c·∫≠p nh·∫≠t tr√™n giao di·ªán
        Map<String, Object> response = new HashMap<>();
        response.put("totalAmount", totalAmount);
        response.put("soLuongTonKho", sanPham.getSoLuong()); // üõë G·ª≠i s·ªë l∆∞·ª£ng t·ªìn kho v·ªÅ frontend

        return ResponseEntity.ok(response);
    }


    @PostMapping("/remove")
    public String removeFromCart(@RequestParam Long sanPhamId, HttpSession session) {
        System.out.println("üõë Y√™u c·∫ßu x√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng: sanPhamId = " + sanPhamId);

        // üõë Ki·ªÉm tra n·∫øu ng∆∞·ªùi d√πng ch∆∞a ƒëƒÉng nh·∫≠p
        nhanvien currentUser = (nhanvien) session.getAttribute("currentUser");
        if (currentUser == null) {
            System.out.println("üî¥ L·ªói: Ng∆∞·ªùi d√πng ch∆∞a ƒëƒÉng nh·∫≠p.");
            return "redirect:/login";
        }
        System.out.println("‚úÖ Ng∆∞·ªùi d√πng hi·ªán t·∫°i: " + currentUser.getId());

        // üîç Ki·ªÉm tra s·∫£n ph·∫©m c√≥ t·ªìn t·∫°i kh√¥ng
        Optional<sanpham> optionalSanPham = sanPhamRepository.findById(sanPhamId);
        if (optionalSanPham.isEmpty()) {
            System.out.println("üî¥ L·ªói: S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i.");
            return "redirect:/cart/view";
        }
        sanpham sanPham = optionalSanPham.get();
        System.out.println("‚úÖ S·∫£n ph·∫©m c·∫ßn x√≥a: " + sanPham.getId() + " - " + sanPham.getTensanpham());

        // üîç L·∫•y ƒë∆°n h√†ng ch∆∞a thanh to√°n c·ªßa nh√¢n vi√™n hi·ªán t·∫°i
        Optional<donhang> optionalDonHang = donHangRepository.findByNhanVienAndTrangThai(currentUser, "Ch∆∞a thanh to√°n");
        if (optionalDonHang.isEmpty()) {
            System.out.println("üî¥ L·ªói: Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng ch∆∞a thanh to√°n.");
            return "redirect:/cart/view";
        }

        donhang donHang = optionalDonHang.get();
        System.out.println("‚úÖ ƒê∆°n h√†ng hi·ªán t·∫°i: " + donHang.getId());

        // üîç T√¨m s·∫£n ph·∫©m c·∫ßn x√≥a trong gi·ªè h√†ng (S·ª¨A L·ªñI ·ªû ƒê√ÇY)
        Optional<chitietdonhang> optionalChiTiet = chiTietDonHangRepository.findByDonHangAndSanPham(donHang, sanPham);
        if (optionalChiTiet.isEmpty()) {
            System.out.println("üî¥ L·ªói: Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†y trong gi·ªè h√†ng.");
            return "redirect:/cart/view";
        }

        chitietdonhang chiTiet = optionalChiTiet.get();
        System.out.println("‚úÖ X√≥a s·∫£n ph·∫©m: " + chiTiet.getSanPham().getTensanpham());

        // üî• X√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng
        chiTietDonHangRepository.delete(chiTiet);

        // üü¢ C·∫≠p nh·∫≠t t·ªïng ti·ªÅn ƒë∆°n h√†ng
        donHang.setTongTien(donHang.getTongTien().subtract(chiTiet.getGia().multiply(BigDecimal.valueOf(chiTiet.getSoLuong()))));
        donHangRepository.save(donHang);
        System.out.println("‚úÖ C·∫≠p nh·∫≠t t·ªïng ti·ªÅn ƒë∆°n h√†ng: " + donHang.getTongTien());

        // üõí C·∫≠p nh·∫≠t session gi·ªè h√†ng
        int cartCount = chiTietDonHangRepository.countByNhanVienAndTrangThai(currentUser, "Ch∆∞a thanh to√°n");
        session.setAttribute("cartCount", cartCount);
        System.out.println("‚úÖ C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong gi·ªè h√†ng: " + cartCount);

        return "redirect:/cart/view";
    }






    @GetMapping("/count")
    @ResponseBody
    public int getCartCount(HttpSession session) {
        nhanvien currentUser = (nhanvien) session.getAttribute("currentUser");
        if (currentUser == null) {
            return 0;
        }

        // ‚úÖ ƒê·∫øm s·ªë lo·∫°i s·∫£n ph·∫©m trong gi·ªè h√†ng (kh√¥ng t√≠nh t·ªïng s·ªë l∆∞·ª£ng)
        return (int) chiTietDonHangRepository.findByDonHang_NhanVien_IdAndDonHang_TrangThai(
                currentUser.getId(), "Ch∆∞a thanh to√°n"
        ).stream().map(chitietdonhang::getSanPham).distinct().count();
    }

    @GetMapping("/checkout")
    public String checkoutPage(Model model, @RequestParam Long nhanVienId) {
        BigDecimal totalAmount = cartService.calculateTotalPrice(nhanVienId); // T√≠nh t·ªïng ti·ªÅn
        BigDecimal discount = new BigDecimal(2000000); // Gi·∫£m gi√° c·ªë ƒë·ªãnh
        BigDecimal finalTotal = totalAmount.subtract(discount).max(BigDecimal.ZERO); // Tr√°nh gi√° tr·ªã √¢m

        model.addAttribute("totalAmount", totalAmount);
        model.addAttribute("finalTotal", finalTotal);
        return "/Java5/checkout";
    }



}
