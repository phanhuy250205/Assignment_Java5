package com.example.assignment_java5.controller;

import com.example.assignment_java5.Dto.sanphamdto;
import com.example.assignment_java5.model.HinhAnhSanPham;
import com.example.assignment_java5.model.nhanvien;
import com.example.assignment_java5.model.phanloaihang;
import com.example.assignment_java5.model.sanpham;
import com.example.assignment_java5.service.HinhAnhSanPhamService;
import com.example.assignment_java5.service.PhanLoaiHangService;
import com.example.assignment_java5.service.sanphamservice;
import jakarta.servlet.http.HttpSession;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.Banner;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

@Controller
@RequestMapping("/api/sanpham")
public class sanphamcontroller {
    @Autowired
    private sanphamservice Sanphamservice;

    @Autowired
    private PhanLoaiHangService phanLoaiHangService;

    @Autowired
    private HinhAnhSanPhamService hinhAnhSanPhamService;

    @GetMapping("/list")
    public String getSanPhamList(@RequestParam(value = "category", required = false) Long categoryId,
                                 @RequestParam(value = "searchTerm", required = false) String searchTerm,
                                 @RequestParam(value = "minGia", required = false) Double minGia,
                                 @RequestParam(value = "maxGia", required = false) Double maxGia,
                                 @RequestParam(value = "thuongHieu", required = false) List<String> thuongHieu,
                                 @RequestParam(value = "page", defaultValue = "0") int page,
                                 @RequestParam(value = "size", defaultValue = "12") int size,
                                 Model model, HttpSession session) {

        Page<sanpham> sanPhamPage;

        // L·∫•y th√¥ng tin ng∆∞·ªùi d√πng hi·ªán t·∫°i t·ª´ session
        nhanvien currentUser = (nhanvien) session.getAttribute("currentUser");
        Long currentUserId = (currentUser != null && currentUser.getChucVu() != null) ? currentUser.getChucVu().getId() : null;

        // In ra currentUserId ƒë·ªÉ ki·ªÉm tra
        System.out.println("Current User ID: " + currentUserId);

        // Ki·ªÉm tra n·∫øu c√≥ categoryId, l·ªçc s·∫£n ph·∫©m theo danh m·ª•c
        if (categoryId != null) {
            sanPhamPage = Sanphamservice.getSanPhamByPhanLoaiHang_Id(categoryId, PageRequest.of(page, size));
        } else {
            // N·∫øu kh√¥ng c√≥ categoryId, th·ª±c hi·ªán t√¨m ki·∫øm v√† l·ªçc s·∫£n ph·∫©m
            sanPhamPage = Sanphamservice.searchAndFilterSanPham(searchTerm, minGia, maxGia, thuongHieu, page, size);
        }

        // L·∫•y t·∫•t c·∫£ danh m·ª•c ph√¢n lo·∫°i t·ª´ service
        List<phanloaihang> danhMucList = phanLoaiHangService.getAllDanhMuc();

        // Truy·ªÅn c√°c thu·ªôc t√≠nh v√†o model
        model.addAttribute("sanPhamPage", sanPhamPage);
        model.addAttribute("currentPage", page);
        model.addAttribute("totalPages", sanPhamPage.getTotalPages());
        model.addAttribute("searchTerm", searchTerm);
        model.addAttribute("minGia", minGia);
        model.addAttribute("maxGia", maxGia);
        model.addAttribute("thuongHieu", thuongHieu);
        model.addAttribute("categoryId", categoryId);
        model.addAttribute("danhMucList", danhMucList);

        // Ki·ªÉm tra user role v√† ƒëi·ªÅu ch·ªânh n√∫t hi·ªÉn th·ªã t√πy theo userId
        if (currentUserId != null) {
            // Ki·ªÉm tra xem userId c√≥ ph·∫£i l√† 10002 (Role ng∆∞·ªùi d√πng l√† kh√°ch h√†ng)
            if (currentUserId == 10002) {
                model.addAttribute("showAddToCart", true); // Hi·ªÉn th·ªã n√∫t "Th√™m v√†o gi·ªè"
            } else {
                model.addAttribute("showAddToCart", false); // ·∫®n n√∫t "Th√™m v√†o gi·ªè", ch·ªâ hi·ªÉn th·ªã n√∫t "Xem th·ªëng k√™"
            }
        } else {
            model.addAttribute("showAddToCart", false); // Kh√¥ng c√≥ session user, ·∫©n n√∫t
        }

        return "products";  // Trang s·∫£n ph·∫©m hi·ªÉn th·ªã danh s√°ch
    }

    @GetMapping("/uploadsanpham")
    public String uploadsanpham(Model model) {
        List<sanpham> sanphamList = Sanphamservice.getallSanpham();
        List<phanloaihang> danhMucList = phanLoaiHangService.getAllDanhMuc(); // üîπ L·∫•y danh m·ª•c

        // ‚úÖ Debug: Ki·ªÉm tra d·ªØ li·ªáu danh m·ª•c trong console
        System.out.println("üìå Danh s√°ch danh m·ª•c: " + danhMucList);

        model.addAttribute("sanPhams", sanphamList);
        model.addAttribute("danhMucList", danhMucList); // ‚úÖ Truy·ªÅn danh m·ª•c v√†o Thymeleaf

        return "uploadoder";
    }

    @GetMapping("/detail/{id}")
    public String getSanPhamDetail(@PathVariable Long id, Model model) {
        Optional<sanpham> sanPhamOpt = Sanphamservice.getSanPhamById(id);

        if (sanPhamOpt.isEmpty()) {
            return "redirect:/sanpham";
        }

        sanpham sanPham = sanPhamOpt.get();
        List<HinhAnhSanPham> danhSachAnh = hinhAnhSanPhamService.getHinhAnhBySanPhamId(id);

        // Ki·ªÉm tra d·ªØ li·ªáu danh s√°ch ·∫£nh
        for (HinhAnhSanPham anh : danhSachAnh) {
            System.out.println("·∫¢nh URL: " + anh.getUrlHinhAnh());
        }

        model.addAttribute("sanPham", sanPham);
        model.addAttribute("danhSachAnh", danhSachAnh);

        return "product-detail";
    }


    //L·∫•y t·∫•t c·∫£ s·∫£n ph·∫©m theo id
    @GetMapping("/{id}")
    public String getsanphamid(@PathVariable int id, Model model) {
        sanpham Sanpham = Sanphamservice.getSanPhamById(Long.valueOf(id)).orElse(null);
        model.addAttribute("sanPham", Sanpham);
        return "product-detail";
    }

    @PostMapping("/create")
    public String createSanpham(@ModelAttribute sanpham sanPham,
                                @RequestParam("phanLoaiId") Long phanLoaiId,
                                @RequestParam(value = "files", required = false) List<MultipartFile> files) {

        sanPham.setPhanLoaiHang(phanLoaiHangService.getDanhMucById(phanLoaiId)
                .orElseThrow(() -> new RuntimeException("‚ùå Kh√¥ng t√¨m th·∫•y danh m·ª•c v·ªõi ID: " + phanLoaiId)));

        Sanphamservice.createSanPham(sanPham, files);
        return "redirect:/api/sanpham/uploadsanpham";
    }

    // X√≥a s·∫£n ph·∫©m
    @GetMapping("/edit/{id}")
    public String editSanPham(@PathVariable Long id, Model model) {
        Optional<sanpham> sanPhamOpt = Sanphamservice.getSanPhamById(id);

        if (sanPhamOpt.isPresent()) {
            sanpham sanPham = sanPhamOpt.get();
            model.addAttribute("sanPham", sanPham);  // Truy·ªÅn sanPham v√†o model
            List<phanloaihang> danhMucList = phanLoaiHangService.getAllDanhMuc();
            model.addAttribute("danhMucList", danhMucList);
            return "uploadoder"; // Tr·∫£ v·ªÅ trang v·ªõi modal s·ª≠a s·∫£n ph·∫©m
        } else {
            return "redirect:/api/sanpham/uploadsanpham"; // ƒêi·ªÅu h∆∞·ªõng v·ªÅ trang danh s√°ch n·∫øu kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m
        }
    }

    @GetMapping("/delete/{id}")
    public String deleteSanPham(@PathVariable Long id) {
        Sanphamservice.deleteSanPhamById(id); // G·ªçi ph∆∞∆°ng th·ª©c x√≥a t·ª´ service
        return "redirect:/api/sanpham/uploadsanpham";  // ƒêi·ªÅu h∆∞·ªõng l·∫°i trang danh s√°ch sau khi x√≥a
    }

    @PostMapping("/update")
    public String updateSanPham(@ModelAttribute sanpham sanPham,
                                @RequestParam(value = "files", required = false) List<MultipartFile> files) {
        Sanphamservice.updateSanPham(sanPham.getId(), sanPham, files); // C·∫≠p nh·∫≠t s·∫£n ph·∫©m
        return "redirect:/api/sanpham/uploadsanpham";  // ƒêi·ªÅu h∆∞·ªõng l·∫°i trang danh s√°ch sau khi s·ª≠a
    }





}